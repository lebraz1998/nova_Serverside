{
  "version": 3,
  "sources": [
    "redux/loginSlice.ts",
    "redux/store.ts",
    "components/card.tsx",
    "services/dashboard.services.ts",
    "page/dashboard/dashboard.tsx",
    "services/login.services.ts",
    "page/login/login.tsx",
    "router.tsx",
    "App.tsx",
    "reportWebVitals.ts",
    "index.tsx"
  ],
  "names": [
    "data",
    "username",
    "log",
    "sessionStorage",
    "getItem",
    "console",
    "loginSlice",
    "createSlice",
    "name",
    "initialState",
    "reducers",
    "setLogin",
    "state",
    "action",
    "payload",
    "deleteLogin",
    "actions",
    "configureStore",
    "reducer",
    "login",
    "loginReducer",
    "TopCard",
    "icon",
    "title",
    "value",
    "color",
    "Card",
    "style",
    "padding",
    "CardContent",
    "display",
    "alignItems",
    "width",
    "height",
    "backgroundColor",
    "Typography",
    "fontSize",
    "fontWeight",
    "DashboardServices",
    "a",
    "axios",
    "get",
    "body",
    "post",
    "_id",
    "delete",
    "args",
    "put",
    "status",
    "id",
    "NumberFormatCustom",
    "React",
    "forwardRef",
    "props",
    "ref",
    "onChange",
    "other",
    "getInputRef",
    "onValueChange",
    "values",
    "target",
    "thousandSeparator",
    "isNumericString",
    "prefix",
    "DashboardComponent",
    "useState",
    "Date",
    "date",
    "setDate",
    "startAppointmentTime",
    "endAppointmentTime",
    "price",
    "newBook",
    "setNewBook",
    "loading",
    "setLoading",
    "bookLoading",
    "setBookLoading",
    "appointmentLoading",
    "setAppointmentLoading",
    "appointment",
    "setAppointment",
    "book",
    "setBook",
    "dashboardServices",
    "useMemo",
    "useEffect",
    "getAppointment",
    "then",
    "res",
    "statusCode",
    "result",
    "getBook",
    "Grid",
    "container",
    "spacing",
    "item",
    "xs",
    "md",
    "AllInbox",
    "filter",
    "length",
    "e",
    "TextField",
    "label",
    "marginBottom",
    "fullWidth",
    "prev",
    "parseInt",
    "InputProps",
    "inputComponent",
    "variant",
    "LocalizationProvider",
    "dateAdapter",
    "AdapterDateFns",
    "MobileDateTimePicker",
    "newValue",
    "renderInput",
    "params",
    "marginTop",
    "Button",
    "disabled",
    "toString",
    "onClick",
    "addBook",
    "getTime",
    "Box",
    "sx",
    "maxWidth",
    "bgcolor",
    "List",
    "moment",
    "format",
    "taken",
    "map",
    "ListItem",
    "disablePadding",
    "deleteBook",
    "Delete",
    "justifyContent",
    "CircularProgress",
    "Divider",
    "IconButton",
    "updateAppointment",
    "AccessTime",
    "Container",
    "LoginServices",
    "LoginComponent",
    "dispatch",
    "useDispatch",
    "loginServices",
    "show",
    "setShow",
    "replace",
    "useHistory",
    "password",
    "setlogin",
    "error",
    "setError",
    "handleInput",
    "useCallback",
    "Fragment",
    "LinearProgress",
    "textAlign",
    "FormControl",
    "InputLabel",
    "htmlFor",
    "OutlinedInput",
    "type",
    "endAdornment",
    "InputAdornment",
    "position",
    "edge",
    "Visibility",
    "VisibilityOff",
    "catch",
    "align",
    "RouteApp",
    "useSelector",
    "path",
    "exact",
    "render",
    "window",
    "location",
    "flexGrow",
    "AppBar",
    "Toolbar",
    "component",
    "App",
    "store",
    "subscribe",
    "getState",
    "setItem",
    "reportWebVitals",
    "onPerfEntry",
    "Function",
    "getCLS",
    "getFID",
    "getFCP",
    "getLCP",
    "getTTFB",
    "ReactDOM",
    "StrictMode",
    "document",
    "getElementById"
  ],
  "mappings": "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",
  "file": "static/js/main.fd98ce45.chunk.js",
  "sourcesContent": [
    "import { createSlice } from \"@reduxjs/toolkit\";\r\nconst data = { username: \"\" };\r\nconst log = sessionStorage.getItem(\"login\");\r\n\r\nif (log) {\r\n  data.username = log;\r\n}\r\n\r\nconsole.log(log);\r\nexport const loginSlice = createSlice({\r\n  name: \"login\",\r\n  initialState: {\r\n    username: data.username,\r\n  },\r\n  reducers: {\r\n    setLogin: (state, action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.username = action.payload.username;\r\n    },\r\n    deleteLogin: (state) => {\r\n      state.username = \"a\";\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { setLogin, deleteLogin } = loginSlice.actions;\r\n\r\nexport default loginSlice.reducer;\r\n",
    "import { configureStore } from \"@reduxjs/toolkit\";\r\nimport loginReducer from \"./loginSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    login: loginReducer,\r\n  },\r\n});\r\n",
    "import { Card, CardContent, Box, Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nexport default function TopCard({\r\n  icon,\r\n  title,\r\n  value,\r\n  color,\r\n}: {\r\n  icon: any;\r\n  title: string;\r\n  value: string;\r\n  color: string;\r\n}) {\r\n  return (\r\n    <Card style={{ padding: 0 }}>\r\n      <CardContent style={{ display: \"flex\", alignItems: \"start\", padding: 0 }}>\r\n        <Box width=\"80px\" height=\"110px\" style={{ backgroundColor: color }}>\r\n          {icon}\r\n        </Box>\r\n        <div style={{ padding: 10 }}>\r\n          {\" \"}\r\n          <Typography fontSize=\"30px\">{value}</Typography>\r\n          <Typography fontSize=\"25px\" fontWeight=\"400\">\r\n            {title}\r\n          </Typography>\r\n        </div>{\" \"}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n",
    "import axios from \"axios\";\r\nimport { Appointment } from \"../types/appointment\";\r\nimport { Book } from \"../types/book\";\r\n\r\nexport default class DashboardServices {\r\n  async getAppointment(): Promise<{\r\n    statusCode: number;\r\n    result: Array<Appointment>;\r\n  }> {\r\n    return await (\r\n      await axios.get(\"http://127.0.0.1:3000/api/appointment\")\r\n    ).data;\r\n  }\r\n  async getBook(): Promise<{ statusCode: number; result: Array<Book> }> {\r\n    return await (\r\n      await axios.get(\"http://127.0.0.1:3000/api/book\")\r\n    ).data;\r\n  }\r\n  async addBook(body: {\r\n    startAppointmentTime: number;\r\n    endAppointmentTime: number;\r\n    title: string;\r\n    price: number;\r\n  }): Promise<{ statusCode: number; result: Book }> {\r\n    return await (\r\n      await axios.post(\"http://127.0.0.1:3000/api/book\", body)\r\n    ).data;\r\n  }\r\n  async deleteBook(_id: string): Promise<{ statusCode: number; result: Book }> {\r\n    return await (\r\n      await axios.delete(\"http://127.0.0.1:3000/api/book/\" + _id)\r\n    ).data;\r\n  }\r\n  async updateAppointment(args: {\r\n    _id: string;\r\n    id: string;\r\n    status: \"rejacted\" | \"accpeted\";\r\n  }): Promise<{\r\n    statusCode: number;\r\n    result: Appointment;\r\n  }> {\r\n    console.log(args);\r\n    return (\r\n      await axios.put(\r\n        `http://127.0.0.1:3000/api/appointment/${\r\n          args.status === \"accpeted\" ? \"accpet\" : \"reject\"\r\n        }/${args._id}/${args.status === \"accpeted\" ? args.id : \"\"}`,\r\n      )\r\n    ).data;\r\n  }\r\n}\r\n",
    "import { AllInbox, Delete } from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CircularProgress,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\nimport TopCard from \"../../components/card\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport { AccessTime } from \"@mui/icons-material\";\r\nimport moment from \"moment\";\r\nimport DashboardServices from \"../../services/dashboard.services\";\r\nimport { Appointment } from \"../../types/appointment\";\r\nimport { Book } from \"../../types/book\";\r\nimport { LocalizationProvider, MobileDateTimePicker } from \"@mui/lab\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\ninterface CustomProps {\r\n  onChange: (event: { target: { name: string; value: string } }) => void;\r\n  name: string;\r\n}\r\nconst NumberFormatCustom = React.forwardRef<NumberFormat, CustomProps>(\r\n  function NumberFormatCustom(props, ref) {\r\n    const { onChange, ...other } = props;\r\n\r\n    return (\r\n      <NumberFormat\r\n        {...other}\r\n        getInputRef={ref}\r\n        onValueChange={(values) => {\r\n          onChange({\r\n            target: {\r\n              name: props.name,\r\n              value: values.value,\r\n            },\r\n          });\r\n        }}\r\n        thousandSeparator\r\n        isNumericString\r\n        prefix=\"$\"\r\n      />\r\n    );\r\n  },\r\n);\r\n\r\nexport default function DashboardComponent() {\r\n  const [date, setDate] = useState(new Date()),\r\n    [newBook, setNewBook] = useState({\r\n      startAppointmentTime: new Date(),\r\n      endAppointmentTime: new Date(),\r\n      title: \"\",\r\n      price: 0,\r\n    }),\r\n    [loading, setLoading] = useState(false),\r\n    [bookLoading, setBookLoading] = useState(false),\r\n    [appointmentLoading, setAppointmentLoading] = useState(false),\r\n    [appointment, setAppointment] = useState<Array<Appointment>>([]),\r\n    [book, setBook] = useState<Array<Book>>([]),\r\n    dashboardServices = useMemo(() => new DashboardServices(), []);\r\n  useEffect(() => {\r\n    dashboardServices.getAppointment().then((res) => {\r\n      console.log(res);\r\n      if (res.statusCode === 200) {\r\n        setAppointment(res.result);\r\n        dashboardServices.getBook().then((res) => {\r\n          setBook(res.result);\r\n          setLoading(true);\r\n        });\r\n      }\r\n    });\r\n  }, [dashboardServices]);\r\n  return loading ? (\r\n    <div style={{ padding: 25 }}>\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12} md={4}>\r\n          <TopCard\r\n            icon={\r\n              <AllInbox style={{ fontSize: 60, color: \"white\", padding: 10 }} />\r\n            }\r\n            title={\"Accpeted\"}\r\n            value={\r\n              appointment.filter((res) => res.status === \"accpeted\").length + \"\"\r\n            }\r\n            color=\"#3498db\"\r\n          />{\" \"}\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <TopCard\r\n            icon={\r\n              <AllInbox style={{ fontSize: 60, color: \"white\", padding: 10 }} />\r\n            }\r\n            title={\"Waiting\"}\r\n            value={\r\n              appointment.filter((res) => res.status === \"wating\").length + \"\"\r\n            }\r\n            color=\"#f1c40f\"\r\n          />{\" \"}\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <TopCard\r\n            icon={\r\n              <AllInbox style={{ fontSize: 60, color: \"white\", padding: 10 }} />\r\n            }\r\n            title={\"Rejacted\"}\r\n            value={\r\n              appointment.filter((res) => res.status === \"rejacted\").length + \"\"\r\n            }\r\n            color=\"#e74c3c\"\r\n          />{\" \"}\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={3}>\r\n          <Calendar\r\n            onChange={(e: Date) => {\r\n              setDate(e);\r\n            }}\r\n            value={date}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={3}>\r\n          <Card>\r\n            <div>\r\n              <Typography fontSize=\"22pt\">Add Appointment</Typography>\r\n            </div>{\" \"}\r\n            <TextField\r\n              value={newBook.title}\r\n              label=\"Book Title\"\r\n              name=\"title\"\r\n              style={{ marginBottom: 10 }}\r\n              fullWidth\r\n              onChange={(e) => {\r\n                setNewBook((prev) => ({ ...prev, title: e.target.value }));\r\n              }}\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Book Price\"\r\n              value={newBook.price}\r\n              style={{ marginBottom: 15 }}\r\n              onChange={(e) => {\r\n                setNewBook((prev) => ({\r\n                  ...prev,\r\n                  price: parseInt(e.target.value),\r\n                }));\r\n              }}\r\n              name=\"numberformat\"\r\n              id=\"formatted-numberformat-input\"\r\n              InputProps={{\r\n                inputComponent: NumberFormatCustom as any,\r\n              }}\r\n              variant=\"outlined\"\r\n            />\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n              <MobileDateTimePicker\r\n                label=\"Start Appointment \"\r\n                value={newBook.startAppointmentTime}\r\n                onChange={(newValue) => {\r\n                  console.log(newValue);\r\n                  setNewBook((prev: any) => ({\r\n                    ...prev,\r\n                    startAppointmentTime: newValue,\r\n                  }));\r\n                }}\r\n                renderInput={(params) => <TextField {...params} />}\r\n              />\r\n              <div style={{ marginTop: 15 }}></div>\r\n              <MobileDateTimePicker\r\n                label=\"End Appointment \"\r\n                value={newBook.endAppointmentTime}\r\n                onChange={(newValue) => {\r\n                  console.log(newValue);\r\n                  setNewBook((prev: any) => ({\r\n                    ...prev,\r\n                    endAppointmentTime: newValue,\r\n                  }));\r\n                }}\r\n                renderInput={(params) => <TextField {...params} />}\r\n              />\r\n            </LocalizationProvider>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              style={{ marginTop: 10 }}\r\n              disabled={\r\n                newBook.price === 0 ||\r\n                newBook.price.toString() === \"NaN\" ||\r\n                newBook.title === \"\"\r\n              }\r\n              onClick={() => {\r\n                setBookLoading(true);\r\n                dashboardServices\r\n                  .addBook({\r\n                    endAppointmentTime: newBook.endAppointmentTime.getTime(),\r\n                    startAppointmentTime:\r\n                      newBook.startAppointmentTime.getTime(),\r\n                    title: newBook.title,\r\n                    price: newBook.price,\r\n                  })\r\n                  .then((res) => {\r\n                    setNewBook({\r\n                      title: \"\",\r\n                      price: 0,\r\n                      endAppointmentTime: newBook.endAppointmentTime,\r\n                      startAppointmentTime: newBook.startAppointmentTime,\r\n                    });\r\n                    setBookLoading(false);\r\n                    dashboardServices\r\n                      .getBook()\r\n                      .then((res) => setBook(res.result));\r\n                  });\r\n              }}\r\n            >\r\n              Add\r\n            </Button>\r\n            <CardContent>\r\n              <Box\r\n                sx={{\r\n                  width: \"100%\",\r\n                  maxWidth: 360,\r\n                  bgcolor: \"background.paper\",\r\n                }}\r\n              >\r\n                <List>\r\n                  {book\r\n                    .filter(\r\n                      (res) =>\r\n                        moment(res.startAppointmentTime).format(\r\n                          \"dd-MMM-yyyy\",\r\n                        ) === moment(date.getTime()).format(\"dd-MMM-yyyy\") &&\r\n                        res.taken === false,\r\n                    )\r\n                    .map((res) => (\r\n                      <ListItem disablePadding key={res._id}>\r\n                        <Card>\r\n                          <Typography variant=\"h4\">{res.title}</Typography>\r\n                          <Typography variant=\"body1\">\r\n                            Start Time:\r\n                            {moment(res.endAppointmentTime).format(\"hh:mm a\")} *\r\n                            End Time:\r\n                            {moment(res.endAppointmentTime).format(\"hh:mm a\")}\r\n                          </Typography>\r\n\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            style={{ width: \"100%\" }}\r\n                            onClick={(e) => {\r\n                              setBookLoading(true);\r\n                              dashboardServices\r\n                                .deleteBook(res._id)\r\n                                .then((res) => {\r\n                                  setBookLoading(false);\r\n                                  dashboardServices\r\n                                    .getBook()\r\n                                    .then((res) => setBook(res.result));\r\n                                });\r\n                            }}\r\n                          >\r\n                            <Delete />\r\n                          </Button>\r\n                        </Card>\r\n                      </ListItem>\r\n                    ))}{\" \"}\r\n                </List>\r\n                <div\r\n                  style={{\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  {bookLoading ? <CircularProgress /> : <></>}\r\n                </div>\r\n              </Box>\r\n              <Divider />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} md={3}>\r\n          <Card>\r\n            <Typography fontSize=\"22pt\">Waiting Appointment</Typography>\r\n\r\n            <CardContent>\r\n              <Box\r\n                sx={{\r\n                  width: \"100%\",\r\n                  maxWidth: 360,\r\n                  bgcolor: \"background.paper\",\r\n                }}\r\n              >\r\n                <List>\r\n                  {appointment\r\n                    .filter((res) => res.status === \"wating\")\r\n                    .map((res) => (\r\n                      <ListItem\r\n                        disablePadding\r\n                        key={res._id}\r\n                        style={{ display: \"block\" }}\r\n                      >\r\n                        <Typography variant=\"h5\">{res.title}</Typography>\r\n                        <Typography>\r\n                          Start Time:{\" \"}\r\n                          {moment(res.startAppointmentTime).format(\"hh:mm a\")} *\r\n                          End Time:\r\n                          {moment(res.endAppointmentTime).format(\"hh:mm a\")}\r\n                        </Typography>\r\n                        <IconButton\r\n                          onClick={(e) => {\r\n                            setAppointmentLoading(true);\r\n                            dashboardServices\r\n                              .updateAppointment({\r\n                                id: res.id,\r\n                                _id: res._id,\r\n                                status: \"rejacted\",\r\n                              })\r\n                              .then((res) => {\r\n                                setAppointmentLoading(false);\r\n                                dashboardServices\r\n                                  .getAppointment()\r\n                                  .then((res) => setAppointment(res.result));\r\n                              });\r\n                          }}\r\n                        >\r\n                          <Delete />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          onClick={(e) => {\r\n                            setAppointmentLoading(true);\r\n                            dashboardServices\r\n                              .updateAppointment({\r\n                                id: res.id,\r\n                                _id: res._id,\r\n                                status: \"accpeted\",\r\n                              })\r\n                              .then((res) => {\r\n                                setBookLoading(true);\r\n                                setAppointmentLoading(false);\r\n                                dashboardServices\r\n                                  .getAppointment()\r\n                                  .then((res) => setAppointment(res.result));\r\n                                dashboardServices.getBook().then((res) => {\r\n                                  setBookLoading(false);\r\n                                  setBook(res.result);\r\n                                });\r\n                              });\r\n                          }}\r\n                        >\r\n                          <AccessTime />\r\n                        </IconButton>\r\n                        <Divider />\r\n                      </ListItem>\r\n                    ))}\r\n                </List>\r\n                <div\r\n                  style={{\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  {appointmentLoading ? <CircularProgress /> : <></>}\r\n                </div>\r\n              </Box>\r\n              <Divider />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  ) : (\r\n    <Container>\r\n      <CircularProgress />\r\n    </Container>\r\n  );\r\n}\r\n",
    "import axios from \"axios\";\r\n\r\nexport default class LoginServices {\r\n  login(args: {\r\n    username: string;\r\n    password: string;\r\n  }): Promise<{ data: { statusCode: number } }> {\r\n    return axios.post(\"http://127.0.0.1:3000/api/user\", args);\r\n  }\r\n}\r\n",
    "import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Container,\r\n  FormControl,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  LinearProgress,\r\n  OutlinedInput,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport React, { useCallback, useMemo, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { setLogin } from \"../../redux/loginSlice\";\r\nimport LoginServices from \"../../services/login.services\";\r\n\r\nexport default function LoginComponent() {\r\n  const dispatch = useDispatch(),\r\n    loginServices = useMemo(() => new LoginServices(), []),\r\n    [show, setShow] = useState(false),\r\n    { replace } = useHistory(),\r\n    [login, setlogin] = useState<{ username: string; password: string }>({\r\n      username: \"\",\r\n      password: \"\",\r\n    }),\r\n    [loading, setLoading] = useState(false),\r\n    [error, setError] = useState(false),\r\n    handleInput = useCallback(\r\n      (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        setlogin((prev) => ({ ...prev, [`${e.target.name}`]: e.target.value }));\r\n      },\r\n      [],\r\n    );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\" \"}\r\n      {loading ? <LinearProgress /> : <></>}{\" \"}\r\n      <Container maxWidth=\"xs\">\r\n        <Card>\r\n          <Typography fontSize=\"30px\" textAlign=\"center\">\r\n            Nova-Lab Login\r\n          </Typography>\r\n\r\n          <CardContent>\r\n            <TextField\r\n              onChange={handleInput}\r\n              name=\"username\"\r\n              id=\"outlined-basic\"\r\n              fullWidth\r\n              label=\"Username\"\r\n              variant=\"outlined\"\r\n            />\r\n            <div style={{ marginTop: 10 }}></div>\r\n            <FormControl sx={{ width: \"100%\" }} variant=\"outlined\">\r\n              <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                Password\r\n              </InputLabel>\r\n              <OutlinedInput\r\n                type={show ? \"text\" : \"password\"}\r\n                onChange={handleInput}\r\n                name=\"password\"\r\n                id=\"outlined-adornment-password\"\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      onClick={() => setShow(!show)}\r\n                      aria-label=\"toggle password visibility\"\r\n                      edge=\"end\"\r\n                    >\r\n                      {show ? <Visibility /> : <VisibilityOff />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                }\r\n                label=\"Password\"\r\n              />\r\n            </FormControl>\r\n            <Button\r\n              disabled={\r\n                loading || login.username === \"\" || login.password === \"\"\r\n              }\r\n              variant=\"contained\"\r\n              fullWidth\r\n              style={{ marginTop: 10 }}\r\n              onClick={() => {\r\n                setError(false);\r\n                setLoading(true);\r\n                loginServices\r\n                  .login(login)\r\n                  .then((res) => {\r\n                    setLoading(false);\r\n                    dispatch(setLogin({ username: login.username }));\r\n                    replace(\"/\");\r\n                  })\r\n                  .catch((res) => {\r\n                    setError(true);\r\n                    setLoading(false);\r\n                  });\r\n              }}\r\n            >\r\n              Login\r\n            </Button>\r\n            {error ? (\r\n              <Typography align=\"center\" fontSize={18} color=\"red\">\r\n                Wrong username or password\r\n              </Typography>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n",
    "import { AppBar, Toolbar, Typography, Button } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport DashboardComponent from \"./page/dashboard/dashboard\";\r\nimport LoginComponent from \"./page/login/login\";\r\nexport default function RouteApp() {\r\n  const state = useSelector((state: any) => state.login.username);\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route\r\n          path={\"/\"}\r\n          exact\r\n          render={() => {\r\n            if (state === \"\") {\r\n              window.location = \"/login\" as any;\r\n              return <LoginComponent />;\r\n            }\r\n\r\n            return (\r\n              <React.Fragment>\r\n                <Box sx={{ flexGrow: 1 }}>\r\n                  <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                      <Typography\r\n                        variant=\"h6\"\r\n                        component=\"div\"\r\n                        sx={{ flexGrow: 1 }}\r\n                      >\r\n                        Dashboard\r\n                      </Typography>\r\n                      <Button color=\"inherit\">Logout</Button>\r\n                    </Toolbar>\r\n                  </AppBar>\r\n                </Box>\r\n\r\n                <DashboardComponent />\r\n              </React.Fragment>\r\n            );\r\n          }}\r\n        />\r\n        <Route path={\"/login\"} component={LoginComponent} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n",
    "import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport RouteApp from \"./router\";\n\nfunction App() {\n  store.subscribe(() => {\n    console.log(store.getState().login.username);\n    sessionStorage.setItem(\"login\", store.getState().login.username);\n  });\n  return (\n    <Provider store={store}>\n      <RouteApp></RouteApp>\n    </Provider>\n  );\n}\n\nexport default App;\n",
    "import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"
  ],
  "sourceRoot": ""
}
